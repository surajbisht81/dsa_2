#include <bits/stdc++.h>
using namespace std;

struct Node {
	int data;
	struct Node* next;
	struct Node* prev;
};

struct compare{
    bool operator()(struct Node* a, struct Node* b){
        return a->data > b->data;
    }
};

struct Node* sortAKSortedDLL(struct Node* head, int k)
{
    if(head==NULL || head->next==NULL){
        return head;
    }
    
    Node *res_head = NULL, *res_tail;
    
    priority_queue<Node*, vector<Node*>, compare> pq;
    
    for(int i=0; head!=NULL && i<=k; i++)          // push first k+1 elements in pq
    {
        pq.push(head);
        head = head->next;
    }
    
    while(!pq.empty())
    {
        if(res_head == NULL)                // first print the minimum element in pq
        {
            res_head = pq.top();
            res_head->prev = NULL;
            res_tail = res_head;
        }
        else
        {
            res_tail->next = pq.top();               // this is creation of doubly linked list.
            pq.top()->prev = res_tail;
            res_tail = pq.top();
        }
        
        pq.pop();                          // then make the space available in pq by popping the top element 
        
        if(head!=NULL)
        {
            pq.push(head);              // then push next element if exist 
            head = head->next;
        }
    }
    
    res_tail->next = NULL;
    
    return res_head;
}

void push(struct Node** head_ref, int new_data)
{
	struct Node* new_node = 
		(struct Node*)malloc(sizeof(struct Node));

	new_node->data = new_data;

	new_node->prev = NULL;

	new_node->next = (*head_ref);

	if ((*head_ref) != NULL)
		(*head_ref)->prev = new_node;

	(*head_ref) = new_node;
}

void printList(struct Node* head)
{
	if (head == NULL)
		cout << "Doubly Linked list empty";

	while (head != NULL) {
		cout << head->data << " ";
		head = head->next;
	}
}

int main()
{
	struct Node* head = NULL;

	push(&head, 8);
	push(&head, 56);
	push(&head, 12);
	push(&head, 2);
	push(&head, 6);
	push(&head, 3);

	int k = 2;

	cout << "Original Doubly linked list:n";
	printList(head);

	head = sortAKSortedDLL(head, k);

	cout << "\nDoubly linked list after sorting:n";
	printList(head);

	return 0;
}
