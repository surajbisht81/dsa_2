#include <bits/stdc++.h> 
using namespace std; 

struct Node { 
	char data; 
	struct Node* prev; 
	struct Node* next; 
}; 

// see the copy notes for understanding it 
void rotate(struct Node** head_ref, int N) 
{ 
    if(N == 0 || (*head_ref)==NULL){
        return;
    }
    
    Node *curr = (*head_ref), *temp;
    Node *head = (*head_ref);
    
    int i=1;
    
    while(curr->next != NULL){
        
        if(i==N){
            temp = curr;
        }
        curr = curr->next;
        
        i++;
    }
    
    temp->next->prev = NULL;
    (*head_ref) = temp->next;
    temp->next = NULL;
    
    
    curr->next = head;
    head->prev = curr;
} 

void push(struct Node** head_ref, int new_data) 
{ 
	struct Node* new_node = new Node; 
	new_node->data = new_data; 
	new_node->prev = NULL; 
	new_node->next = (*head_ref); 
	if ((*head_ref) != NULL) 
		(*head_ref)->prev = new_node; 
*head_ref = new_node; 
} 

void printList(struct Node* node) 
{ 
	while (node->next != NULL) { 
		cout << node->data << " "
			<< "<=>"
			<< " "; 
		node = node->next; 
	} 
	cout << node->data; 
} 

int main(void) 
{ 
	struct Node* head = NULL; 

	push(&head, 'h');
	push(&head, 'g');
	push(&head, 'f');
	push(&head, 'e'); 
	push(&head, 'd'); 
	push(&head, 'c'); 
	push(&head, 'b'); 
	push(&head, 'a'); 

	int N = 4; 

	cout << "Given linked list \n"; 
	printList(head); 
	rotate(&head, N); 

	cout << "\nRotated Linked list \n"; 
	printList(head); 

	return 0; 
} 
