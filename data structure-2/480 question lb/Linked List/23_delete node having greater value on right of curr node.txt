class Solution
{
    public:
    
    Node *reverse(Node *head)
    {
        Node *curr = (head);
        Node *prev = NULL, *next = NULL;
        
        while(curr!=NULL){
            next = curr->next;
            curr->next = prev;
            
            prev = curr;
            curr = next;
        }
        return prev;
    }
    
    // we are first reversing the list and then
    // if tracking the maximum value node at each traversal of linked list
    // if curr node is smaller than the maximum till now then delete curr node and move forwared
    // because, think that if we do not reverse then we have to delete all nodes that are behind the grater node
    // by reversing it is easy to find out which node has smaller value than current node,that's why we are using reversing 
    // concept and reverse again after to obtain the same order
    Node *compute(Node *head)
    {
        head = reverse(head);
    
        Node *curr = head;
        Node *maxNode = head, *temp;
        
        while(curr!=NULL && curr->next!=NULL){
            
            if(curr->next->data < maxNode->data){    // if curr node is smaller than max node value then delete curr node
                temp = curr->next;
                curr->next = temp->next;
                delete(temp);
            }
            else{                              // else curr node is maximum till now then update the max node
                curr = curr->next;
                maxNode = curr;
            }
        }
        
        head = reverse(head);
        
        return head;
    }
    
};