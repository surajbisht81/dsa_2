 bool isPossible(int arr[], int n, int m, int mid)
    {
            int students = 1;                                     // first student will be 1 as it will start reading pages
            int pages = 0;
            
            // iterrate over array
            for(int i=0; i<n; i++)
            {
                   if(arr[i] > mid){                  // this is important, if pages of book are greater than required pages then this book will
                       return false;                   // never be read by anyone so return false in this case
                   }
                   
                   if(pages + arr[i] > mid){                // if at some time pages are greater than mid then we will give chance to next student
                       students++;                          // to read the pages so increase the student and initialize the pages as fresh new array
                       pages = arr[i];                      // element
                       
                       if(students > m){                    // check if at some time, students are greater than m then return false
                           return false;
                       }
                   }
                   else{
                       pages += arr[i];                      // otherwise increase the pages
                   }
            }
            return true;
    }
    
    int findPages(int arr[], int n, int m) {
        
        int high = 0;                            // higher bound will be sum of all pages
        for(int i=0; i<n; i++){
            high += arr[i];
        }
        
        int low = arr[0];                        // lower bound can be 0 or smallest element of array
        int ans = -1;
        
        while(low <= high)
        {
            int mid = (low + high)/2;                          // we will check if this mid no of pages are optimal 
            
            if(isPossible(arr, n, m, mid)){                    // then we will keep our ans as mid and we want to minimize the maximum pages 
                ans = mid;
                high = mid - 1;                                // so we will decrease our pages as high by mid-1
            }
            else{
                low = mid + 1;                                 // else we will increase our page is not possible
            }
        }
        
        return ans;
    }