
// this problem is different from job scheduling of greedy
// problem statement is :
//We have n jobs, where every job is scheduled to be done from startTime[i] to endTime[i], obtaining a profit of profit[i].

You're given the startTime, endTime and profit arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.

If you choose a job that ends at time X you will be able to start another job that starts at time X.//



static bool comp(vector<int> a, vector<int> b)
{
    return a[1] < b[1];
}

// main code
int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {
    
    int n = startTime.size();
    if(n == 1){                       // if n is 1 then no need to go furthur just return profit
        return profit[0];
    }
    
    vector<vector<int>> v(n);
    
    // we will store all the start, end and profit in one vector so that we can sort them efficiently
    for(int i=0; i<n; i++){
        int s = startTime[i];
        int e = endTime[i];
        int p = profit[i];
        
        v[i] = {s, e, p};
    }
    
    sort(v.begin(), v.end(), comp);           // sort them according to their end time
    
    
    // it's basically dp problem, so dp will contain ans 
    int dp[n];
    memset(dp, 0, sizeof(dp));
    
    dp[0] = v[0][2];                  // initialize dp 0 as profit of first element of vector
    
    
    // we will iterate over the vector and check by including current element or excluding that we are getting max profit or not
    for(int i=1; i<n; i++)
    {
        // by including current element, we will get inc profit
        int inc = v[i][2];
        
        int last = -1;                    // we have to check from 0 to i-1 that, is there any element which are not overlapping whose index will be in last 
        
        
        // we will use binary search to optimize our result
        int low = 0;
        int high = i-1;
        
        while(low <= high)
        {
            int mid = (low+high)/2;
            
            if(v[mid][1] <= v[i][0]){       // if midth end time is less or equal to ith element start time that's means ith element is not overlapping with mid element
                last = mid;                 // so put our last in mid. Also we want to maximum profit so dp[0] will contain min profit and dp[n-1] will contain max profit
                low = mid + 1;              // means, left side has less profit than right side, so if we find mid then for more options update low as mid+1
            }
            else{
                high = mid - 1;          // else shift high towareds left
            }
        }
        
        if(last != -1){           // if last is not -1 means we find element which is not overlapping with ith element, so include that element profit which was in dp[last]
            inc += dp[last];
        }
        
        int exc = dp[i-1];         // if we include current element so profit will be dp[i-1];
        
        dp[i] = max(inc, exc);      // take max of inc and exc and finally return dp[n-1];
    }
    
    return dp[n-1];
}