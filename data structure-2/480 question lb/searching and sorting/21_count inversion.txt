public:
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    #define ll long long 
    
    ll merge(ll arr[], ll temp[], ll left, ll mid, ll right)
    {
        ll inversion = 0;
        
        ll i = left;      // starting index of left part
        ll j = mid;       // as mid is equal to starting index of right part so
        ll k = left;      // k is for temp array index 
        
        while( (i<=mid-1) && (j<=right))
        {
            if(arr[i] <= arr[j]){
                temp[k++] = arr[i++];       // if left part is less than right part element then do nothing just sort them
            }
            else{
                temp[k++] = arr[j++];       // else do sorting as well as count the inversion
                
                inversion += (mid-i);      // inversion will be mid-i because, left part is greater and left part array is sorted so after
            }                               // i to mid-1 every element will be greater than jth element 
        }
        
        while(i<=mid-1){
            temp[k++] = arr[i++];                 // here just do sorting
        }
        
        while(j<=right){
            temp[k++] = arr[j++];
        }
        
        for(ll i=left; i<=right; i++){            // this is important, because if we do not put the sorted array back to original array, then inversion will be wrong because this algorithm is based on sorting or merge sort
            arr[i] = temp[i];
        }
        return inversion;
    }
    
    ll _mergeSort(ll arr[], ll temp[], ll left, ll right)
    {
        ll mid;
        ll inversion = 0;
        
        if(left < right)
        {
            mid = (left+right)/2;
            
            inversion += _mergeSort(arr, temp, left, mid);       // we basically using merge sort technique that's why we are using recursion
            inversion += _mergeSort(arr, temp, mid+1, right);    // left part will be from left to mid and right is from mid+1 to right     
            
            inversion += merge(arr, temp, left, mid+1, right);  // here sorting of array is done, we are passing mid+1, mid+1 is starting index of
        }                                                       // right part
        
        return inversion;
    }
    
    long long int inversionCount(long long arr[], long long n)
    {
        ll temp[n];                                    // we need to take a temp array to use merge sort
        return _mergeSort(arr, temp, 0, n-1);
    }