//Multimap is similar to map with an addition that multiple elements can have same keys. Also, it is NOT required that the key value and mapped value pair has to be 
//unique in this case. One important thing to note about multimap is that multimap keeps all the keys in sorted order always
// time is O(nlogn) for counting the no of set bits and space is O(n);

class Solution{
    public:
    
    int set_bits(int n)
    {
        int cnt = 0;
        
        while(n > 0){
            cnt++;
            n = n & (n-1);
        }
        
        return cnt;
    }
    
    void sortBySetBitCount(int arr[], int n)
    {
        multimap<int, int> mp;
        
        for(int i=0; i<n; i++){
            int setBits = set_bits(arr[i]);
            
            mp.insert( {-1*setBits, arr[i] } );             // its a way to insert the elements inside multimap, (i.e., making a pair and then inserting)
        }
        
        int k = 0;
        
        for(auto x: mp){
            arr[k++] = x.second;
        }
    }
};

//----------------------------------------------------------------------------------------------------

// time is O(n^2) and space is O(n);
// insertion sort is used here, because insertion sort keeps the ordering of array

class Solution{
    public:
    
    int set_bits(int n)
    {
        int cnt = 0;
        
        while(n)
        {
            cnt++;
            n &= (n-1);
        }
        return cnt;
    }
    
    void sortBySetBitCount(int arr[], int n)
    {
        int aux[n];
        
        for(int i=0; i<n; i++){
            aux[i] = set_bits(arr[i]);
        }
        
        for(int i=1; i<n; i++)
        {
            int key1 = arr[i];
            int key2 = aux[i];
            
            int j = i-1;
            
            while(j>=0 && aux[j] < aux[j+1]){          // if set bit in j+1th element is greater than jth element, then swap them and do similar for j-- till j>=0 
                
                swap(aux[j], aux[j+1]);
                swap(arr[j], arr[j+1]);
                j--;
            }
            
            aux[j+1] = key2; // lastly if while loop exits then in j+1th index, insert key 2 which had the highest no of set bit. 
            arr[j+1] = key1;
        }
    }
};