// using prefix and suffix array
// O(n) space ans O(n) time
typedef long long int ll;

vector<long long int> productExceptSelf(vector<long long int>& nums, int n) {
   
    vector<ll> ans;
    
    if(n==1){
        ans.push_back(1);
        return ans;
    }
    
    ll prefix[n] = {0};
    prefix[0] = nums[0];
    for(int i=1; i<n; i++){
        prefix[i] = nums[i]*prefix[i-1];
    }
    
    ll suffix[n];
    suffix[n-1] = nums[n-1];
    for(int i=n-2; i>=0; i--){
        suffix[i] = nums[i]*suffix[i+1];
    }
    
    for(int i=0; i<n; i++){
        
        if(i==0){
            ans.push_back(suffix[i+1]);
        }
        else if(i==n-1){
            ans.push_back(prefix[n-2]);
        }
        else{
            ll x = prefix[i-1]*suffix[i+1];
            ans.push_back(x);
        }
    }
    
    return ans;
}

//----------------------------------------------------------------------------------

//O(1) space and O(n) time because we are using only one temp variable
typedef long long int ll;

vector<long long int> productExceptSelf(vector<long long int>& nums, int n) {
   
    vector<ll> ans(n, 1LL);
    
    if(n==1){
        ans.push_back(1);
        return ans;
    }
    
    ll temp = 1LL;
    
    for(int i=0; i<n; i++){
        ans[i] = ans[i]*temp;
        temp = temp*nums[i];
    }
    
    temp = 1LL;
    for(int i=n-1; i>=0; i--){
        ans[i] *= temp;
        temp  = temp * nums[i];
    }
    
    return ans;
}