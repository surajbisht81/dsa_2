/*Given a binary string str of length N, the task is to find the maximum count of substrings str can be divided into such that all the substrings are balanced 
i.e. they have equal number of 0s and 1s. If it is not possible to split str satisfying the conditions then print -1.*/


/* Initialize count = 0 and traverse the string character by character and keep track of the number of 0s and 1s so far, whenever the count of 0s and 1s become equal
 increment the count. If the count of 0s and 1s in the original string is not equal then print -1 else print the value of count after the traversal of the complete 
string.*/

#include <bits/stdc++.h> 
using namespace std; 

int maxSubStr(string str, int n) 
{ 

	int count0 = 0, count1 = 0; 

	int cnt = 0; 
	for (int i = 0; i < n; i++) { 
		if (str[i] == '0') { 
			count0++; 
		} 
		else { 
			count1++; 
		} 
		if (count0 == count1) { 
			cnt++; 
		} 
	
	if (count0 != count1) { 
		return -1; 
	} 

	return cnt; 
} 
 
int main() 
{ 
	string str = "0100110101"; 
	int n = str.length(); 
	cout << maxSubStr(str, n); 
	return 0; 
} 
