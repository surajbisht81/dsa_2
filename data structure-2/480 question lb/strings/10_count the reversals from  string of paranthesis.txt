#include<bits/stdc++.h>
using namespace std;
#define ll long long int 

int main()
{
   ll t;
   cin>>t;
   
   while(t--)
   {
        string expr;
        cin >> expr;
        
        int res = 0;
        
        int len = expr.length();
        
        stack<char> st;
        
        // first making the expression balanced removing the balanced part from the string
       for (int i=0; i<len; i++) 
       { 
           if (expr[i]=='}' && !st.empty()) 
           { 
               if (st.top()=='{') 
                   st.pop(); 
               else
                   st.push(expr[i]); 
           } 
           else
               st.push(expr[i]); 
       } 
        
       // counting the no of opening and closing brackets from imbalanced string
       int m = 0, n = 0;
       
       while(st.size() != 0)
       {
           char x = st.top();
           st.pop();
           
           if(x == '}'){
               n++;
           }else{
               m++;
           }
       }
       
       
      // if one of them is 0 then if m or n is odd then it is impossible to reverse the brackets
      if(m==0 || n==0){
          if(m==0 && n%2==0){
              cout<<n/2<<endl;
          }else if(n==0 && m%2==0){
              cout<<m/2<<endl;
          }else{
              cout<<"-1"<<endl;
          }
      }
      // if both of them are not zero then if both are odd then take ceil of their half and if both are even then just add them and cout their
      // half otherwise -1
      else{
          if(m%2!=0 && n%2!=0){
              cout<<ceil((m*1.0)/(2*1.0)) + ceil((1.0*n)/(1.0*2))<<endl;
          }else if(m%2==0 && n%2==0){
              cout<<(m+n)/2<<endl;
          }
          else{
              cout<<"-1"<<endl;
          }
      }
       
   }
   
   return 0;
}