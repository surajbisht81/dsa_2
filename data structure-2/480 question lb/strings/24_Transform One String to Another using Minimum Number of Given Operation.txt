/*Given two strings A and B, the task is to convert A to B if possible. The only operation allowed is to put any character from A and insert it at front.
 Find if itâ€™s possible to convert the string. If yes, then output minimum no. of operations required for transformation.

Examples:

Input:  A = "ABD", B = "BAD"
Output: 1
Explanation: Pick B and insert it at front*/


#include<bits/stdc++.h> 
using namespace std; 

int minOps(string& A, string& B) 
{ 
    if(A.length() != B.length()){                // if length is not equal return not possible
        return -1;
    }
    
    // checking if both the strings have same set of characters with same freq or not
     char count[256];
     memset(count, 0, sizeof(count));
     
     for(int i=0; i<A.length(); i++){
         count[A[i]]++;
     }
     
     for(int i=0; i<B.length(); i++){
         count[B[i]]--;
     }
     
     for(int i=0; i<256; i++){
         if(count[i])
          return -1;
     }
     
     
     // finding the minimum no of characters to shift ahead 
     int res = 0;
     
     int n = A.length();
     
     for(int i=n-1, j=n-1; i>=0; i--, j--)           // till i is greater than 0, not j, only i(think of it). 
     {
         if(A[i] == B[i]){                       // we will traverse from the back and if char matches then move forward in both strings
             i--;
             j--;
             continue;
         }
         
         while( i>=0 && A[i]!=B[j])               // if they don't match, then find the current char of B[j] in A string and res will be
         {                                        // equal to no of character behind the char in A which was present in B at j
             i--;              // moving forward and continuesly checking if characters matches or not
             res++;
         }
     }
     
     return res;
} 

// Driver program 
int main() 
{ 
	string A = "EACBD"; 
	string B = "EABCD"; 
	cout << "Minimum number of operations "
			"required is " << minOps(A, B); 
	return 0; 
} 
