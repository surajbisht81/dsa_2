/*Given an n x n matrix mat[n][n] of integers, find the maximum value of mat(c, d) â€“ mat(a, b) over all choices of indexes such that both c > a and d > b.
Input:
mat[N][N] = {{ 1, 2, -1, -4, -20 },
             { -8, -3, 4, 2, 1 }, 
             { 3, 8, 6, 1, 3 },
             { -4, -1, 1, 7, -6 },
             { 0, -4, 10, -5, 1 }};
Output: 18
The maximum value is 18 as mat[4][2] 
- mat[1][0] = 18 has maximum difference. */


/*We pre-process the matrix such that index(i, j) stores max of elements in matrix from (i, j) to (N-1, N-1) and in the process keeps on updating maximum value 
found so far. We finally return the maximum value.*/


#include <bits/stdc++.h> 
using namespace std; 
#define N 5 

int findMaxValue(int mat[][N]) 
{ 
     int res = INT_MIN;
     
     int new_mat[N][N];
     new_mat[N-1][N-1] = mat[N-1][N-1];
     
     int maxVal = mat[N-1][N-1];
     
     // first processing the last row
     for(int j=N-2; j>=0; j--)
     {
         if(mat[N-1][j] > maxVal)
          maxVal = mat[N-1][j];
          
         new_mat[N-1][j] = maxVal;
     }
     
     // processing the last column
     maxVal = mat[N-1][N-1];
     for(int i=N-2; i>=0; i--)
     {
         if(mat[i][N-1] > maxVal)
          maxVal = mat[i][N-1];
          
         new_mat[i][N-1] = maxVal;
     }
     
     // processing the rest of matrix
     for(int i=N-2; i>=0; i--)
     {
         for(int j=N-2; j>=0; j--)
         {
             if((new_mat[i+1][j+1] - mat[i][j]) > res){                  // new_mat[i+1][j+1] contains max element from (i+1, j+1) to (N-1, N-1)
                 res = new_mat[i+1][j+1] - mat[i][j] ;                  
             }
             
             new_mat[i][j] = max(mat[i][j], max(new_mat[i+1][j], new_mat[i][j+1]));
         }
     }
     
     return res;
} 

int main() 
{ 
	int mat[N][N] = { 
					{ 1, 2, -1, -4, -20 }, 
					{ -8, -3, 4, 2, 1 }, 
					{ 3, 8, 6, 1, 3 }, 
					{ -4, -1, 1, 7, -6 }, 
					{ 0, -4, 10, -5, 1 } 
					}; 
	cout << "Maximum Value is "
		<< findMaxValue(mat); 

	return 0; 
} 
