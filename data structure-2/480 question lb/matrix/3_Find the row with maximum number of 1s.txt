class Solution{
public:
    
	int rowWithMax1s(vector<vector<int> > &arr, int n, int m) {
	    
	    int maxim = INT_MIN;
	    int first_row = -1;       // first row with max no of 1's in it 
	    
	    for(int i=0; i<n; i++)
	    {
	        int low = 0, high = m-1;
                int idx = -1;
            
                // binary search to find leftmost 1 in row
                while(low <= high)
                 {
                    int mid = (low+high)/2;
            
                    if( (mid==0 || arr[i][mid-1]==0) && arr[i][mid] == 1){
                        idx = mid;
                        break;
                    }else if(arr[i][mid]==0){
                        low = mid+1;
                    }else{
                        high = mid-1;
                    }
                 }
	        
                // if idx is not -1 and m-idx is greater then update the first_row
	        if(idx != -1 && (m-idx) > maxim){
	            maxim = (m-idx);
	            first_row = i;
	        }
	    }
	    return first_row;
	}

};


// Time complaxity is O(m+n) + O(log(m));
class Solution{
public:
	int rowWithMax1s(vector<vector<int> > arr, int n, int m) {
	    
	    int low = 0, high = m-1;
	    int idx = -1;
	    
	    while(low <= high)
	    {
	        int mid = (low+high)/2;
	        
	        if( (mid==0 || arr[0][mid-1]==0) && arr[0][mid] == 1){
	            idx = mid;
	            break;
	        }
	        else if(arr[0][mid] == 0){
	            low = mid+1;
	        }
	        else{
	            high = mid-1;
	        }
	    }
	    
	    int row = -1;       // row having max no of 1's
	    
	    if(idx == -1){    // if 1 is not present in thr first row then we need to check 1 from c-1th col in next rows
	        idx = m-1;
	    }else{                     // else condition is because if 1st row has max no of 1's only
	        idx = idx-1;
	        row = 0;
	    }
	    
            // we will check left of each row
	    for(int i=1; i<n; i++)
	    {
	        while(idx >=0 && arr[i][idx]==1){            // if left of current row is 1 then go leftward in that row and if left of current row is 0 then 
	            idx = idx-1;                             // it will definitely not contain max no of ones because previous row had same no of 1's 
	            row = i;
	        }
	    }
	    
	    return row;
	}

};