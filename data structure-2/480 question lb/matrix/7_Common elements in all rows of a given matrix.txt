/*Given an m x n matrix, find all common elements present in all rows in O(mn) time and one traversal of matrix.*/

/*The idea is to use maps. We initially insert all elements of the first row in an map. For every other element in remaining rows, we check if it is present 
in the map. If it is present in the map and is not duplicated in current row, we increment count of the element in map by 1, else we ignore the element. 
If the currently traversed row is the last row, we print the element if it has appeared m-1 times before.*/

/*The time complexity of this solution is O(m * n) and we are doing only one traversal of the matrix. TC is O(N*M) and SC is O(N) */

#include <bits/stdc++.h> 
using namespace std; 

#define M 4 
#define N 5 

void printCommonElements(int mat[M][N]) 
{ 
      // crating the map for storing all the elements of first row
      unordered_map<int, int> mp;
      
      for(int i=0; i<N; i++)
      {
          int x = mat[0][i];
          mp[x]++;
      }
      
      // traversing from the 1st row
      for(int i=1; i<M; i++)
      {
          for(int j=0; j<N; j++)
          {
              int x = mat[i][j];
              
              // if frequency of x is equal to i means it was present in previous row then increase the freq by 1 also this condition will 
              if(mp[x] == i)     //also handle the duplicates elemnts in rows
              {
                  mp[x] = i+1;
                  
                  if(i == M-1){             // if this is last row then print the element 
                      cout<<x<<" ";
                  }
              }
          }
      }
} 

int main() 
{ 
	int mat[M][N] = 
	{ 
		{1, 2, 1, 4, 8}, 
		{3, 7, 8, 5, 1}, 
		{8, 7, 7, 3, 1}, 
		{8, 1, 2, 7, 9}, 
	}; 

	printCommonElements(mat); 

	return 0; 
} 
