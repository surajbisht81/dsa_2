Find all strings that match specific pattern in a dictionary
Last Updated: 19-05-2020
Given a dictionary of words, find all strings that matches the given pattern where every character in the pattern is uniquely mapped to a character in the dictionary.


/*
Input:  
dict = ["abb", "abc", "xyz", "xyy"];
pattern = "foo"
Output: [xyy abb]
xyy and abb have same character at 
index 1 and 2 like the pattern*/

// C++ program to print all 
// the strings that match the 
// given pattern where every 
// character in the pattern is 
// uniquely mapped to a character 
// in the dictionary 
#include <bits/stdc++.h> 
using namespace std; 

// Function to encode given string 
string encodeString(string str) 
{ 
	unordered_map<char, int> map; 
	string res = ""; 
	int i = 0; 

	// for each character in given string 
	for (char ch : str) { 

		// If the character is occurring 
		// for the first time, assign next 
		// unique number to that char 
		if (map.find(ch) == map.end()) 
			map[ch] = i++; 

		// append the number associated 
		// with current character into the 
		// output string 
		res += to_string(map[ch]); 
	} 

	return res; 
} 

// Function to print all the 
// strings that match the 
// given pattern where every 
// character in the pattern is 
// uniquely mapped to a character 
// in the dictionary 
void findMatchedWords(unordered_set<string> dict, 
					string pattern) 
{ 
	// len is length of the pattern 
	int len = pattern.length(); 

	// Encode the string 
	string hash = encodeString(pattern); 

	// for each word in the dictionary 
	for (string word : dict) { 
		// If size of pattern is same as 
		// size of current dictionary word 
		// and both pattern and the word 
		// has same hash, print the word 
		if (word.length() == len 
			&& encodeString(word) == hash) 
			cout << word << " "; 
	} 
} 

// Driver code 
int main() 
{ 
	unordered_set<string> dict = { "abb", "abc", 
								"xyz", "xyy" }; 
	string pattern = "foo"; 

	findMatchedWords(dict, pattern); 

	return 0; 
} 


// another method
/*
// C++ program to print all 
// the strings that match the 
// given pattern where every 
// character in the pattern is 
// uniquely mapped to a character 
// in the dictionary 
#include <bits/stdc++.h> 
using namespace std; 

bool check(string pattern, string word) 
{ 
	if (pattern.length() != word.length()) 
		return false; 

	char ch[128] = { 0 }; 

	int len = word.length(); 

	for (int i = 0; i < len; i++) { 
		if (ch[pattern[i]] == 0) 
			ch[pattern[i]] = word[i]; 
		else if (ch[pattern[i]] != word[i]) 
			return false; 
	} 

	return true; 
} 

// Function to print all the 
// strings that match the 
// given pattern where every 
// character in the pattern is 
// uniquely mapped to a character 
// in the dictionary 
void findMatchedWords(unordered_set<string> dict, 
					string pattern) 
{ 
	// len is length of the pattern 
	int len = pattern.length(); 

	// for each word in the dictionary 
	for (string word : dict) { 

		if (check(pattern, word)) 
			cout << word << " "; 
	} 
} 

// Driver code 
int main() 
{ 
	unordered_set<string> dict = { "abb", "abc", "xyz", "xyy" }; 
	string pattern = "foo"; 

	findMatchedWords(dict, pattern); 

	return 0; 
} 
