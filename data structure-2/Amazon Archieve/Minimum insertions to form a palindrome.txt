
Given a string str, the task is to find the minimum number of characters to be inserted to convert it to palindrome.
//
// A Naive recursive program to find minimum 
// number insertions needed to make a string 
// palindrome 
#include<bits/stdc++.h> 
using namespace std; 


// Recursive function to find 
// minimum number of insertions 
int findMinInsertions(char str[], int l, int h) 
{ 
	// Base Cases 
	if (l > h) return INT_MAX; 
	if (l == h) return 0; 
	if (l == h - 1) return (str[l] == str[h])? 0 : 1; 

	// Check if the first and last characters are 
	// same. On the basis of the comparison result, 
	// decide which subrpoblem(s) to call 
	return (str[l] == str[h])? 
					findMinInsertions(str, l + 1, h - 1): 
					(min(findMinInsertions(str, l, h - 1), 
					findMinInsertions(str, l + 1, h)) + 1); 
} 

// Driver code 
int main() 
{ 
	char str[] = "geeks"; 
	cout << findMinInsertions(str, 0, strlen(str) - 1); 
	return 0; 
} 

// This code is contributed by 
// Akanksha Rai 


/another dp method
a b c d e
----------
0 1 2 3 4
0 0 1 2 3 
0 0 0 1 2 
0 0 0 0 1 
0 0 0 0 0

// A Dynamic Programming based program to find 
// minimum number insertions needed to make a 
// string palindrome 
#include <bits/stdc++.h> 
using namespace std; 


// A DP function to find minimum 
// number of insertions 
int findMinInsertionsDP(char str[], int n) 
{ 
	// Create a table of size n*n. table[i][j] 
	// will store minimum number of insertions 
	// needed to convert str[i..j] to a palindrome. 
	int table[n][n], l, h, gap; 

	// Initialize all table entries as 0 
	memset(table, 0, sizeof(table)); 

	// Fill the table 
	for (gap = 1; gap < n; ++gap) 
		for (l = 0, h = gap; h < n; ++l, ++h) 
			table[l][h] = (str[l] == str[h])? 
						table[l + 1][h - 1] : 
						(min(table[l][h - 1], 
							table[l + 1][h]) + 1); 

	// Return minimum number of insertions 
	// for str[0..n-1] 
	return table[0][n - 1]; 
} 

// Driver Code 
int main() 
{ 
	char str[] = "geeks"; 
	cout << findMinInsertionsDP(str, strlen(str)); 
	return 0; 
} 



// another dp solution
// An LCS based program to find minimum number 
// insertions needed to make a string palindrome 
#include <bits/stdc++.h> 
using namespace std; 


// Returns length of LCS for X[0..m-1], Y[0..n-1]. 
int lcs( string X, string Y, int m, int n ) 
{ 
	int L[m+1][n+1]; 
	int i, j; 
	
	/* Following steps build L[m+1][n+1] in bottom 
		up fashion. Note that L[i][j] contains length 
		of LCS of X[0..i-1] and Y[0..j-1] */
	for (i = 0; i <= m; i++) 
	{ 
		for (j = 0; j <= n; j++) 
		{ 
		if (i == 0 || j == 0) 
			L[i][j] = 0; 
	
		else if (X[i - 1] == Y[j - 1]) 
			L[i][j] = L[i - 1][j - 1] + 1; 
	
		else
			L[i][j] = max(L[i - 1][j], L[i][j - 1]); 
		} 
	} 
	
	/* L[m][n] contains length of LCS for X[0..n-1] 
		and Y[0..m-1] */
	return L[m][n]; 
} 

void reverseStr(string& str) 
{ 
	int n = str.length(); 

	// Swap character starting from two 
	// corners 
	for (int i = 0; i < n / 2; i++) 
		swap(str[i], str[n - i - 1]); 
} 

// LCS based function to find minimum number of 
// insertions 
int findMinInsertionsLCS(string str, int n) 
{ 
	// Creata another string to store reverse of 'str' 
	string rev = ""; 
	rev = str; 
	reverseStr(rev); 
	
	// The output is length of string minus length of lcs of 
	// str and it reverse 
	return (n - lcs(str, rev, n, n)); 
} 

// Driver code 
int main() 
{ 
	string str = "geeks"; 
	cout << findMinInsertionsLCS(str, str.length()); 
	return 0; 
} 

