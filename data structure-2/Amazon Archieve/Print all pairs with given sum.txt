Given an array of integers, and a number ‘sum’, print all pairs in the array whose sum is equal to ‘sum’.

// C++ implementation of simple method to 
// find count of pairs with given sum. 
#include <bits/stdc++.h> 
using namespace std; 

// Returns number of pairs in arr[0..n-1] 
// with sum equal to 'sum' 
void printPairs(int arr[], int n, int sum) 
{ 
	// Store counts of all elements in map m 
	unordered_map<int, int> m; 

	// Traverse through all elements 
	for (int i = 0; i < n; i++) { 

		// Search if a pair can be formed with 
		// arr[i]. 
		int rem = sum - arr[i]; 
		if (m.find(rem) != m.end()) { 
			int count = m[rem]; 
			for (int j = 0; j < count; j++) 
				cout << "(" << rem << ", "
					<< arr[i] << ")" << endl; 
		} 
		m[arr[i]]++; 
	} 
} 

// Driver function to test the above function 
int main() 
{ 
	int arr[] = { 1, 5, 7, -1, 5 }; 
	int n = sizeof(arr) / sizeof(arr[0]); 
	int sum = 6; 
	printPairs(arr, n, sum); 
	return 0; 
} 



// 
another method of two pointers

import java.util.Arrays; 

/** 
* Created by sampat. 
*/
public class SumOfPairs { 

	public void pairedElements(int arr[], int sum) 
	{ 
		int low = 0; 
		int high = arr.length - 1; 

		while (low < high) { 
			if (arr[low] + arr[high] == sum) { 
				System.out.println("The pair is : ("
								+ arr[low] + ", " + arr[high] + ")"); 
			} 
			if (arr[low] + arr[high] > sum) { 
				high--; 
			} 
			else { 
				low++; 
			} 
		} 
	} 

	public static void main(String[] args) 
	{ 
		int arr[] = { 2, 3, 4, -2, 6, 8, 9, 11 }; 
		Arrays.sort(arr); 

		SumOfPairs sp = new SumOfPairs(); 
		sp.pairedElements(arr, 6); 
	} 
} 
