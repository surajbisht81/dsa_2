void convertToDLL(Node *root, Node **tail, Node **head)
{
    if(!root)
      return;
      
    if(root->left)
      convertToDLL(root->left, tail, head);
      
    root->left = *tail;
    
    if(*tail == NULL)
       *head = root;
    else
      (*tail)->right = root;
      
    *tail = root;
    
    if(root->right)
      convertToDLL(root->right, tail, head);
}

int isPairPresent(struct Node *root, int target)
{
     Node *tail = NULL, *head = NULL;
     
     convertToDLL(root, &tail, &head);
     while(head!=tail)
     {
         int curr_sum = head->data+tail->data;
         
         if(curr_sum==target)
          return 1;
         else if(curr_sum<target)
            head = head->right;
         else
           tail = tail->left;
     }
     return 0;
}

/*
// another method using hashmap
bool findpairUtil(Node* root, int sum,  unordered_set<int> &set) 
{ 
    if (root == NULL) 
        return false; 
  
    if (findpairUtil(root->left, sum, set)) 
        return true; 
  
    if (set.find(sum - root->data) != set.end()) { 
        cout << "Pair is found ("
             << sum - root->data << ", "
             << root->data << ")" << endl; 
        return true; 
    } 
    else
        set.insert(root->data); 
  
    return findpairUtil(root->right, sum, set); 
} 
  
void findPair(Node* root, int sum) 
{ 
    unordered_set<int> set; 
    if (!findpairUtil(root, sum, set)) 
        cout << "Pairs do not exit" << endl; 
} 
*/