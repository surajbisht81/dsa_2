/*1. You are given a boolean expression with symbols T,F, and operators &,|,^ , where
   T represents True
   F represents False
   & represents boolean AND
   | represents boolean OR
   ^ represents boolean XOR.
2. You have to find the number of ways in which the expression can be parenthesized so that the value of expression evaluates to true.*/

#include<bits/stdc++.h>
using namespace std;

int Boolean_Parenthesization(string str1, string str2)
{
    int n = str1.length();
    
    int dpt[n][n];                                                              // true dp which contains no of true formed 
    memset(dpt, 0, sizeof(dpt));
    
    int dpf[n][n];                                                              // false dp
    memset(dpf, 0, sizeof(dpf));
    
    for(int g=0; g<n; g++)
    {
        for(int i=0, j=g; j<n; i++, j++)
        {
            if(g==0){
                
                if(str1[i]=='T'){                                               // if string 1 is T then true dp contains 1 and false dp contains 0 else opposite
                    dpt[i][j] = 1;
                    dpf[i][j] = 0;
                }else{
                    dpt[i][j] = 0;
                    dpf[i][j] = 1;
                }
            }
            else{                                                               // if gap is not 0 or more characters then, 
                
                for(int k=i; k<j; k++)                                          // k starts from index of operator i.e., from i to j-1
                {
                    char ch = str2[k];                                         // getting the operator (& or | or ^)
                    
                    int left_true = dpt[i][k];                                  // left part of true dp
                    int right_true = dpt[k+1][j];                               // right part of true dp
                    int left_false = dpf[i][k];                                 // left part of false dp
                    int right_false = dpf[k+1][j];                              // right part of false dp
                    
                    if(ch=='&'){           // if operator is AND
                        
                        dpt[i][j] += left_true*right_true;                                               //then check copy to understand this part
                        dpf[i][j] += left_false*right_false + left_false*right_true + left_true*right_false;
                    }else if(ch=='|'){
                        
                        dpt[i][j] += left_true*right_true + left_true*right_false + left_false*right_true;
                        dpf[i][j] += left_false*right_false;
                    }else{
                        
                        dpt[i][j] += left_true*right_false + left_false*right_true;
                        dpf[i][j] += left_true*right_true + left_false*right_false;
                    }
                }
            }
        }
    }
    
    return dpt[0][n-1];
}

int main()
{
    string str1, str2;
    cin>>str1>>str2;
    
    cout<<Boolean_Parenthesization(str1, str2);
    return 0;
}