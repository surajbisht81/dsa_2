/*1. You are given a number n, representing the count of items.
2. You are given n numbers, representing the values of n items.
3. You are given n numbers, representing the weights of n items.
3. You are given a number "cap", which is the capacity of a bag you've.
4. You are required to calculate and print the maximum value that can be created in the bag without overflowing it's capacity.
5. Also, you have to print the indices of items that should be selected to make maximum profit.
6. You have to print all such configurations.*/

#include<bits/stdc++.h>
using namespace std;

class Pair
{
    public:
    int i;
    int j;
    string psf;
    Pair(int i, int j, string psf){
        this->i = i;
        this->j = j;
        this->psf = psf;
    }
};

void ZeroOneKnapsack(int n, int val[], int wgt[], int cap)
{
    int dp[n+1][cap+1];
    
    for(int i=0; i<=n; i++)
    {
        for(int j=0; j<=cap; j++)
        {
            if(i==0 or j==0)
              dp[i][j] = 0;
            else{
                dp[i][j] = dp[i-1][j];
                
                if(j>=wgt[i-1]){
                    dp[i][j] = max(dp[i][j], dp[i-1][j-wgt[i-1]]+val[i-1]);
                }
            }
        }
    }
        
        cout<<dp[n][cap]<<endl;
        
        queue<Pair*> qu;
        qu.push(new Pair(n, cap, ""));              // n is dp last row and cap is dp last col
        
        while(!qu.empty())
        {
            Pair *p = qu.front();
            qu.pop();
            
            int row = p->i, col = p->j;
            string ans = p->psf;
            
            if(row==0 or col==0){
                cout<<ans<<endl;
            }
            else{
                
                int exc = dp[row-1][col];                            // on excluding the elemetn, we are getting the uppper dp data
                int inc = dp[row-1][col-wgt[row-1]] + val[row-1];  // in inclusion, getting dp data when including this element
                
                if(col>=wgt[row-1] and inc == dp[row][col]){          // if weights are more than weight of current item and inc is equal to dp current row, col data
                    qu.push(new Pair(row-1, col-wgt[row-1], to_string(row-1)+" "+ans)); // then include (row-1) as an index as answer
                }
                
                if(exc == dp[row][col]){
                    qu.push(new Pair(row-1, col, ans));     // if this item was excluded then ans will remain same;
                }
            }
        }
}

int main()
{
    int n;
    cin>>n;
    
    int val[n];
    for(int i=0; i<n; i++)
     cin>>val[i];
     
    int wgt[n];
    for(int i=0; i<n; i++)
     cin>>wgt[i];
     
    int cap;
    cin>>cap;
    
    ZeroOneKnapsack(n, val, wgt, cap);
    return 0;
}