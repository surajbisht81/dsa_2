/*1. You are given a string str.
2. You have to find the length of longest subsequence which is appearing twice in the string.
3. Every ith character in both the subsequences must have different indices in the original string.
*/

#include<bits/stdc++.h>
using namespace std;

void LRS(string str)
{
    int n = str.length();
    
    int dp[n+1][n+1];
    memset(dp, 0, sizeof(dp));
    
    for(int i=n-1; i>=0; i--)
    {
        for(int j=n-1; j>=0; j--)
        {
            if(str[i] == str[j]  and  i!=j)
             dp[i][j] = dp[i+1][j+1] + 1;
            else
             dp[i][j] = max(dp[i+1][j], dp[i][j+1]);
        }
    }
    
    cout<<dp[0][0];
}

int main()
{
    string str;
    cin>>str;
    
    LRS(str);
    return 0;
}