/*1. You are given two strings S1 and S2. S1 represents a text and S2 represents a pattern.
2. You have to print 'true' if the pattern is matched with the given text, otherwise print 'false'.

The pattern can include the characters '.' and '*'
'.' - matches any single character
'*' - matches zero or more of the preceding character*/

#include<bits/stdc++.h>
using namespace std;

void Regular_Expression(string str, string patt)
{
    int n = patt.length();
    int m = str.length();
    
    bool dp[n+1][m+1];                                       // dp table with 1 extra row and col for blank string and pattern
    
    for(int i=0; i<=n; i++)
    {
        for(int j=0; j<=m; j++)
        {
            if(i==0 and j==0){                   // first cell will be true always
                dp[i][j] = true;
            }
            else if(i==0){                       // first row will be false always
                dp[i][j] = false;
            }
            else if(j==0){                          
                if(patt[i-1]=='*')                      // if * is present in first col then go 2 steps above else false in dp
                  dp[i][j] = dp[i-2][j];
                else
                  dp[i][j] = false;
            }
            else{
                
                if(patt[i-1] == '.'){                                // as . matches with every one character then go diagonally left above
                    dp[i][j] = dp[i-1][j-1];
                }
                else if(patt[i-1] == '*'){                         // if patt char is * then 2 steps above will always be checked 
                    dp[i][j] = dp[i-2][j];
                    
                    if(patt[i-2]=='.' or patt[i-2] == str[j-1]){        // and if pattern 2nd last char is "." or matches with string last char
                        dp[i][j] = dp[i][j] || dp[i][j-1];              // then do OR with left cell of current cell
                    }
                }
                else if(patt[i-1]==str[j-1]){                     // if patt and string last char matches then go diagonaaly above and left
                    dp[i][j] = dp[i-1][j-1];
                }
                else{                                            // if patt and string last char do not match then false
                    dp[i][j] = false;
                }
            }
        }
    }
    
    if(dp[n][m] == true){
        cout<<"true";
    }else{
        cout<<"false";
    }
}

int main()
{
    string str;
    string patt;
    
    cin>>str;
    cin>>patt;
    
    Regular_Expression(str, patt);
    return 0;
}