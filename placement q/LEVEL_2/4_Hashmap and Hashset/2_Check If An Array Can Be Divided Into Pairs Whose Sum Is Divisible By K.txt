/*1. You are given an array(arr) of integers and a number K.
2. You have to find if the given array can be divided into pairs such that the sum of every pair is divisible by k.*/

#include<bits/stdc++.h>
using namespace std;

void Pair_DivisibleByK(int arr[], int n, int k)
{
    unordered_map<int, int> mp;
    
    // obtaining the remainder by dividing each element of array by k, and get the count
    for(int i=0; i<n; i++)
    {
        int rem = arr[i] % k;
        
        mp[rem]++;
    }
    
    bool flag = true;
    
    // again traverse the array, and check the frequency map
    for(int i=0; i<n; i++)
    {
        int rem = arr[i] % k;
        
        // if rem is 0 then count the freq of 0 if even then OK else print false
        if(rem==0){
            int freq = mp[rem];
            
            if(freq %2 !=0){
                flag = false;
                break;
            }
        }
        // this case will run for even k only for odd k, eg, (k=11, 2*5 != 11)
        else if(2*rem == k){
            int freq = mp[rem];
            
            if(freq % 2 != 0){
                flag = false;
                break;
            }
        }
        // if we get rem other than 0 and k/2, then get freq of rem, and get freq of k-rem if both are equal then ok otherwise print false 
        else{
            int first_freq = mp[rem];
            int second_freq = mp[k-rem];
            
            if(first_freq != second_freq){
                flag = false;
                break;
            }
        }
    }
    
    if(flag)
     cout<<"true";
    else
     cout<<"false";
}

int main()
{
    int n;
    cin>>n;
    
    int arr[n];
    for(int i=0;i<n; i++)
     cin>>arr[i];
    
    int k;
    cin>>k;
    
    Pair_DivisibleByK(arr, n, k);
    return 0;
}