/*ou are given a string s. We want to partition the string into as many parts as possible so that each letter appears in at most one part.

Return a list of integers representing the size of these parts.

 

Example 1:

Input: s = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits s into less parts.*/


class Solution {
public:
    vector<int> partitionLabels(string s) {
        
        unordered_map<char, int> mp;
        
        for(int i=0; i<s.length(); i++)
        {
            mp[s[i]] = i;
        }
        
        vector<int> ans;
        
        int prev = -1;
        int maxim = 0;
        
        for(int i=0; i<s.length(); i++)
        {
            char ch = s[i];
            
            maxim = max(maxim, mp[ch]);
            
            if(maxim == i){
                ans.push_back(maxim - prev);
                prev = maxim;
            }
        }
        
        return ans;
    }
};