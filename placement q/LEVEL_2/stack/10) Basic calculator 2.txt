/*Given a string s which represents an expression, evaluate this expression and return its value. 

The integer division should truncate toward zero.*/


class Solution {
public:
    int calculate(string s) {
        
        int n = s.length();
        
        stack<int> st;
        char sign = '+';                                // default value of sign is +
        
        for(int i=0; i<n; i++)
        {
            char ch = s[i];
            
            if(isdigit(ch)){                            // if character is a digit 
                int val = 0;
                
                while(i<n && isdigit(ch)){                 // then make integer value, integer could be of tens place or 100 place
                    val = val *10 + (ch-'0');
                    i++;
                    ch = s[i];
                }
                i--;                                    // i-- is overcome one i++ 
                
                if(sign == '+'){                      // if sign is + or - then push
                    st.push(val);
                }
                else if(sign == '-'){
                    st.push(-val);
                }
                else if(sign == '*'){                // else if sign is * or / then pop top element perform operation and push new value
                    int new_val = st.top()*val;
                    st.pop();
                    st.push(new_val);
                }
                else{
                    int new_val = st.top()/val;
                    st.pop();
                    st.push(new_val);
                }
            }
            else if(ch != ' '){                   // string contains digit, sign and blank space. so if ch is not space then it must be sign so update it.
                sign = ch;
            }
        }
        
        int ans = 0;
        
        while(!st.empty()){
            ans += st.top();
            st.pop();
        }
        
        return ans;
    }
};