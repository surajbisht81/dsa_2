/*Given an integer array nums and a positive integer k, return the most competitive subsequence of nums of size k.

An array's subsequence is a resulting sequence obtained by erasing some (possibly zero) elements from the array.

We define that a subsequence a is more competitive than a subsequence b (of the same length) if in the first position where a and b differ, subsequence a has a number
 less than the corresponding number in b. For example, [1,3,4] is more competitive than [1,3,5] because the first position they differ is at the final number, and 4 
is less than 5. */


class Solution {
public:
    vector<int> mostCompetitive(vector<int>& nums, int k) {
        
        stack<int> st;
        
        int n = nums.size();
        
        for(int i=0; i<n; i++)
        {
            // checking if nums[i] has sufficient no of elements after itself and this can be checked by 
            // n-i-1 is for no of elements after itself and k-st.size is requirement in stack
            // if n-i-1 is greater(no of elements are greater or equal) then it is valid
            // 2nd condition is current element should be less than top value then only pop
            while(st.size() > 0 && n-i-1 >= k-st.size() && nums[i] < st.top()){
                st.pop();
            }
            
            // and adding is only possible is stack has less than k value, if it has greater than or equal to k value
            // then our ans is met.
            if(st.size() < k){
                st.push(nums[i]);
            }
        }
        
        nums.resize(k);
        k--;
        
        while(!st.empty()){
            nums[k--] = st.top();
            st.pop();
        }
        
        return nums;
    }
};