/*Given two sequences pushed and popped with distinct values, return true if and only if this could have been the result of a sequence of push and pop operations on 
an initially empty stack.

 

Example 1:

Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
Output: true
Explanation: We might do the following sequence:
push(1), push(2), push(3), push(4), pop() -> 4,
push(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1*/


class Solution {
public:
    bool validateStackSequences(vector<int>& pushed, vector<int>& popped) {
        
             stack<int> st;
             
             int n = pushed.size();
             
             int i = 0, j = 0;
        
             while( i < n){
                 
                 if(st.empty()){
                     st.push(pushed[i]);
                     i++;
                 }
                 else if(st.top() == popped[j]){
                     st.pop();
                     j++;
                 }
                 else{
                     st.push(pushed[i]);
                     i++;
                 }
             }
        
             while(j < n)
             {
                 if(st.top() == popped[j]){
                     st.pop();
                     j++;
                 }
                 else{
                     break;
                 }
             }
        
             if(st.empty()) return true;
             else return false;
    }
};