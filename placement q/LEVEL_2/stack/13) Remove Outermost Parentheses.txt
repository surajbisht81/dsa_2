/*A valid parentheses string is either empty "", "(" + A + ")", or A + B, where A and B are valid parentheses strings, and + represents string concatenation.

For example, "", "()", "(())()", and "(()(()))" are all valid parentheses strings.
A valid parentheses string s is primitive if it is nonempty, and there does not exist a way to split it into s = A + B, with A and B nonempty valid parentheses strings.

Given a valid parentheses string s, consider its primitive decomposition: s = P1 + P2 + ... + Pk, where Pi are primitive valid parentheses strings.

Return s after removing the outermost parentheses of every primitive string in the primitive decomposition of s.*/






class Solution {
public:
    string removeOuterParentheses(string s) {
        
        string ans = "";
        stack<int> st;
        
        for(char ch : s)
        {
            // there is no case when st size is 0 and ch is ')'
            if(st.size() == 0 && ch=='('){         // when we get ( and size is 0 then push but do not 
                st.push(ch);                       // include it in our ans
            }
            else if(st.size()!=0 && ch=='('){      // and when st size is not 0 then put it into ans
                st.push(ch);
                ans += '(';
            }
            else{
                st.pop();            // when we get a ) bracket then this ) bracket could belong to 
                                     // outermost ( bracket or innermost ( bracket
                if(st.size() != 0)   // so first pop from st and if size is not 0 then it means ) belong
                   ans += ')';       // to innermost so add it into ans else it belong to outermost
            }                        // so don't add it into our ans
        }
        
        return ans;
    }
};