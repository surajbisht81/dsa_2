/*Given a string s of '(' , ')' and lowercase English characters. 

Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.

Formally, a parentheses string is valid if and only if:

It is the empty string, contains only lowercase characters, or
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.
 

Example 1:

Input: s = "lee(t(c)o)de)"
Output: "lee(t(c)o)de"
Explanation: "lee(t(co)de)" , "lee(t(c)ode)" would also be accepted.*/




class Solution {
public:
    string minRemoveToMakeValid(string s) {
        
        // in this quest, we also have to remove parenthesis from original string and return ans
        string ans = "";
        
        stack<int> st;         // we will put index of invalid parenthesis into our stack
                               // ans stack will contain only index of opening brackets
        
        for(int i=0; i<s.length(); i++)
        {
            char ch = s[i];
            
            if(ch=='('){
                st.push(i);
            }
            else if(ch == ')'){          // ch is ')'
                
                if(st.size() == 0){         // if st size is 0 and ch is ) bracket that means it is 
                    s[i] = '#';             // invalid bracket so replace this ) with a # from string
                }
                else{
                    st.pop();              // else pop from stack
                }
            }
        }
        
        while(!st.empty()){         // now if stack size is not 0, means, it contains index of invalid
            int i = st.top();       // parenthesis
            s[i] = '#';
            st.pop();
        }
        
        for(char ch : s){     // make our ans
            if(ch != '#'){
                ans += ch;
            }
        }
        
        return ans;
    }
};