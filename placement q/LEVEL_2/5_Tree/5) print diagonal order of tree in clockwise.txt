/* C++ program to construct string from binary tree*/
#include <bits/stdc++.h>
using namespace std;

/* A binary tree node has data, pointer to left
child and a pointer to right child */
struct Node {
	int data;
	Node *left, *right;
};

/* Helper function that allocates a new node */
Node* newNode(int data)
{
	Node* node = (Node*)malloc(sizeof(Node));
	node->data = data;
	node->left = node->right = NULL;
	return (node);
}

// Iterative function to print diagonal view
void diagonalPrint(Node* root)
{
  queue<Node*> qu;
  
  qu.push(root);
  int size = 0;
  
  while(!qu.empty())
  {
    size = qu.size();
    
    while(size--)                        // for printing particular diagonal
    {
      Node *p = qu.front();
      qu.pop();
      while(p!=NULL)                    // it may happen that, p->right is null and still there are element in diagonal to print
      {						            // so if p becomes null then we have to take node from queue
        cout<<p->data<<" ";
        if(p->left) qu.push(p->left);
        p = p->right;
      }
    }
    cout<<endl;
  }
}

// Driver Code
int main()
{
	Node* root = newNode(8);
	root->left = newNode(3);
	root->right = newNode(10);
	root->left->left = newNode(1);
	root->left->right = newNode(6);
	root->right->right = newNode(14);
	root->right->right->left = newNode(13);
	root->left->right->left = newNode(4);
	root->left->right->right = newNode(7);
	diagonalPrint(root);
}
