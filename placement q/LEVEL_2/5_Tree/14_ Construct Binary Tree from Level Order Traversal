#include <bits/stdc++.h>
#include <vector>
#include <queue>
using namespace std;

class TreeNode
{
public:
    int val = 0;
    TreeNode *left = nullptr;
    TreeNode *right = nullptr;

    TreeNode(int val)
    {
        this->val = val;
    }
};

class levelPair
{
public:
    TreeNode *par = nullptr;
    int lb;
    int rb;

    levelPair(TreeNode *par, int lb, int rb)
    {
        this->par = par;
        this->lb = lb;
        this->rb = rb;
    }
};

TreeNode *constructBSTFromLevelOrder(vector<int> &arr)
{
    int n = arr.size();

    if(n == 0) return NULL;

    queue<levelPair> qu;
    qu.push(levelPair(NULL, INT_MIN, INT_MAX));

    TreeNode *root = NULL;

    int i = 0;
    
    while(!qu.empty() && i < n){

        levelPair p = qu.front();
        qu.pop();

        int ele = arr[i];

        if(ele < p.lb || ele > p.rb) continue;

        // i++ will be after checking if element is capable of becoming the child of current removed node
        i++;

        TreeNode *child = new TreeNode(ele);

        if(p.par == NULL) root = child;
        else{
            if(ele < p.par->val){
                p.par->left = child;
            }
            else{
                p.par->right = child;
            }
        }

        qu.push(levelPair(child, p.lb, ele));
        qu.push(levelPair(child, ele, p.rb));
    }

    return root;
}

// input_Section_====================================================================

void display(TreeNode *node)
{
    if (node == nullptr)
        return;

    string str = "";
    str += ((node->left != nullptr ? to_string(node->left->val) : "."));
    str += (" -> " + to_string(node->val) + " <- ");
    str += ((node->right != nullptr ? to_string(node->right->val) : "."));

    cout << str << endl;

    display(node->left);
    display(node->right);
}

void solve()
{
    int n;
    cin >> n;
    vector<int> pre(n, 0);
    for (int i = 0; i < n; i++)
    {
        cin >> pre[i];
    }

    TreeNode *root = constructBSTFromLevelOrder(pre);
    display(root);
}

int main()
{
    solve();
    return 0;
}
