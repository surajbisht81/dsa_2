
class Solution {
public:
    TreeNode *prev = NULL;
    
    bool isValidBST(TreeNode* root) {
        
        if(root == NULL){
            return true;
        }
        
        if(!isValidBST(root->left))     // if left subtree is not bst then return false;
            return false;
        
        if(prev!=NULL && prev->val >= root->val)    // if prev is not null and prev val is greater or equal to current 
            return false;                           // root val then return false
        
        prev = root;                                 // otherwise, change prev = root;
        
        if(!isValidBST(root->right))    // if right subtree is not bst then return false;
            return false;
        
        return true;
    }
};



// ------------------------------- using moris inorder traversal---------------------------------

class Solution {
public:
    
    TreeNode *getRightMostNode(TreeNode *left, TreeNode *curr){
        while(left->right != NULL && left->right != curr){
            left = left->right;
        }
        
        return left;
    }
    
    bool isValidBST(TreeNode* root) {
        
        TreeNode *curr = root;
        TreeNode *prev = NULL;
        
        while(curr != NULL){
            TreeNode *leftNode = curr->left;
            
            if(leftNode == NULL){
                if(prev!=NULL && prev->val > curr->val) return false;
                prev = curr;
                curr = curr->right;
            }
            else{
                TreeNode *rightMostNode = getRightMostNode(leftNode, curr);
                
                if(rightMostNode->right == NULL){
                    rightMostNode->right = curr;
                    curr = curr->left;
                }
                else{
                    if(prev->val > curr->val) return false;
                    
                    rightMostNode->right = NULL;
                    prev = curr;
                    curr = curr->right;
                }
            }
        }
        
        return true;
    }
};
