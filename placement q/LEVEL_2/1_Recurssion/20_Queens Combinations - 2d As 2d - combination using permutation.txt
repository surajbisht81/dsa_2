#include<bits/stdc++.h>
using namespace std;

void Queen_Combination(int queen, int n, vector<vector<int>> &chess, int i, int j)
{
    // base code
    if(queen == n)
    {
        for(int row=0; row<n; row++){
            for(int col=0; col<n; col++){
                if(chess[row][col]==1){
                    cout<<"q\t";
                }else{
                    cout<<"-\t";
                }
            }
            cout<<endl;
        }    
        cout<<endl;
        return;
    }
    
    // main code
    for(int col=j+1; col<n; col++)                        // this is the next unused col loop
    {
            chess[i][col] = 1;                            // make that col used and make call with used col as col and row as i(same)
            Queen_Combination(queen+1, n, chess, i, col);
            chess[i][col] = 0;
    }
    
    
    for(int row = i+1; row<n; row++)                 // this is for the next unused rows and make call
    {
        for(int col=0; col<n; col++)                // and obviously all row will be unused so run loop from 0
        {
             chess[row][col] = 1;                     
             Queen_Combination(queen+1, n, chess, row, col);  
             chess[row][col] = 0;
        }
    }
}

int main()
{
    int n;
    cin>>n;
    
    vector<vector<int>> chess(n);
    for(int i=0; i<n; i++){
        for(int j=0; j<n; j++){
            chess[i].push_back(0);
        }
    }
    
    Queen_Combination(0, n, chess, 0, -1);  // 1st parameter is no of queen placed so far, n is total no of queen given, chess is boolean vector, 
    return 0;                                // 0 is last row used, -1 is last col used
}