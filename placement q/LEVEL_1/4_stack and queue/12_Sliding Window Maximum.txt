#include<bits/stdc++.h>
using namespace std;

void sliding_window_max(int arr[], int n, int k)
{
   stack<int> st;
   
   int nge[n];              // storing the next greatest element in nge array
   nge[n-1] = n;         
   st.push(n-1);
   
   for(int i=n-2; i>=0; i--)             // this is the approach to find nge i.e., traversing from back
   {
       while(!st.empty() and arr[i] >= arr[st.top()])
        st.pop();
        
       if(st.empty())
         nge[i] = n;
       else
         nge[i] = st.top();
         
      st.push(i);
   }
   
   int j=0;                        // j is a variable which will find out the nge of current index 
   for(int i=0; i<=n-k; i++)
   {
       if(j<i)                  // if somehow j value become less than i then make j equal to i
         j=i;
         
       while(nge[j] < i+k)                 // if nge of current index lies inside the window size then 
          j = nge[j];                      // move the index to nge index
          
       cout<<arr[j]<<endl;             // if nge crosses the window size the previous nge index was the index of greatest element in window size k
   }
}

int main()
{
    int n;
    cin>>n;
    
    int arr[n];
    for(int i=0; i<n; i++)
     cin>>arr[i];
     
    int k;
    cin>>k;
    
    sliding_window_max(arr, n, k);
    return 0;
}