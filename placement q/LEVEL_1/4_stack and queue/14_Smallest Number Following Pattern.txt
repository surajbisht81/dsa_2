/*1. You are given a pattern of upto 8 length containing characters 'i' and 'd'.
2. 'd' stands for decreasing and 'i' stands for increasing
3. You have to print the smallest number, using the digits 1 to 9 only without repetition, such that 
the digit decreases following a d and increases follwing an i.

e.g.
d -> 21
i -> 12*/


#include<bits/stdc++.h>
using namespace std;

void smallest_number(string str)
{
    stack<int> st;
    
    int num = 1;   // a num 
    
    for(int i=0; i<str.length(); i++)
    {
        if(str[i]=='d')   // when it's a d then first push num then increment num
        {
            st.push(num);
            num++;
        }
        else
        {
            st.push(num);        // if it's an i then push num then num++ then print all elements of stack
            num++;
            
            while(!st.empty())
            {
                cout<<st.top();
                st.pop();
            }
        }
    }
    
    st.push(num);           // when string is processed completely then push incremented num and then print all elements of stack
    while(!st.empty())
    {
        cout<<st.top();
        st.pop();
    }
}

int main()
{
    string str;
    cin>>str;
    
    smallest_number(str);
    return 0;
}