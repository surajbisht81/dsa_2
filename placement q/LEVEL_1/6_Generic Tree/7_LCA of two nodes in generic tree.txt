#include<bits/stdc++.h>
using namespace std;

class Node
{
    public:
    int data;
    vector<Node*> children;
};

Node* construct(int arr[], int n)
{
    Node *root = NULL;
    
    stack<Node*> st;
    
    for(int i=0; i<n; i++)
    {
        if(arr[i] == -1)
        {
            st.pop();
        }
        else
        {
            Node *temp = new Node;
            temp->data = arr[i];
            
            if(st.size()>0){
                st.top()->children.push_back(temp);
            }
            else{
                root = temp;
            }
            st.push(temp);
        }
    }
    return root;
}

vector<int> RootToLeafPath(Node *root, int k)
{
    if(root->data == k)
    {
        vector<int> v;
        v.push_back(root->data);
        return v;
    }
    
    vector<int> v;
    for(Node *child : root->children)
    {
        v = RootToLeafPath(child, k);
        if(v.size()>0)
         {
             v.push_back(root->data);
             return v;
         }
    }
    return v;
}

// LCA code is mainly dependent on node to root path concept
int LCA(Node *root, int a, int b)
{
    vector<int> path1 = RootToLeafPath(root, a);         // finding node to root path for first value
    vector<int> path2 = RootToLeafPath(root, b);         // finding node to root path for second value
    
    int i = path1.size() - 1;                            // node to root path contains root node at the end of vector so put an iterator i and j
    int j = path2.size() - 1;                            // at end of both vector 
    
    while(i>=0 and j>= 0 and path1[i]==path2[j])          // while node data of both vector matches keep doing this
    {
        i--;
        j--;
    }
    
    return path2[j+1];                                    // finally return the common node 
}

int main()
{
    int n;
    cin>>n;
    
    int arr[n];
    for(int i=0; i<n; i++)
     cin>>arr[i];
     
    Node *root = construct(arr, n);
    
    int a, b;
    cin>>a>>b;
    cout<<LCA(root, a, b);
    
    return 0;
}