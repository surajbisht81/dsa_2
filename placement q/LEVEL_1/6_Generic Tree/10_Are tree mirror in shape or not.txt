#include<bits/stdc++.h>
using namespace std;

class Node
{
    public:
    int data;
    vector<Node*> children;
};

Node* construct(int arr[], int n)
{
    Node *root = NULL;
    
    stack<Node*> st;
    
    for(int i=0; i<n; i++)
    {
        if(arr[i] == -1)
        {
            st.pop();
        }
        else
        {
            Node *temp = new Node;
            temp->data = arr[i];
            
            if(st.size()>0){
                st.top()->children.push_back(temp);
            }
            else{
                root = temp;
            }
            st.push(temp);
        }
    }
    return root;
}

bool AreMirror(Node *root1, Node *root2)
{
    if(root1->children.size() != root2->children.size())                        // if children size of both tree are not same then return false
    {
        return false;
    }
    
    int n = root2->children.size();
    for(int i=0; i<n; i++)                                                      // run for loop in children of both root node 
    {
        int j = n-1-i;
        
        if(AreMirror(root1->children[i], root2->children[j])==false)            // And check if children are mirror image or not if not return false
         return false;
    }
    return true;                                                                // if false condition do not hit then return true
}

int main()
{
    int n;
    cin>>n;
    
    int arr[n];
    for(int i=0; i<n; i++)
     cin>>arr[i];
     
    Node *root1 = construct(arr, n);
    
    int m;
    cin>>m;
    
    int arr2[m];
    for(int i=0; i<m; i++)
     cin>>arr2[i];
     
    Node *root2 = construct(arr2, m);
    
    if(AreMirror(root1, root2))
     cout<<"true";
    else
     cout<<"false";
    
    return 0;
}