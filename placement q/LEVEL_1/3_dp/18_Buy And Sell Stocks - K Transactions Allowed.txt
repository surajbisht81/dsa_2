#include<bits/stdc++.h>
using namespace std;

/*int max_profit(int n, int price[], int k)
{
    int dp[k+1][n];
    memset(dp, 0, sizeof(dp));
    
    for(int t=1; t<=k; t++)
    {
        for(int d=1; d<n; d++)
        {
            int maxim = dp[t][d-1];
            
            for(int pd=0; pd<d; pd++)
            {
                maxim = max(maxim, (dp[t-1][pd] + price[d] - price[pd]));
            }
            dp[t][d] = maxim;
        }
    }
    return dp[k][n-1];
}*/

int max_profit(int n, int price[], int k){
    
    int dp[k+1][n];
    memset(dp, 0, sizeof(dp));
    
    for(int t=1; t<=k; t++)                     
    {
        int maxim = INT_MIN;                              // intially maxim will be minimum
        for(int day=1; day<n; day++)
        {
            if( dp[t-1][day-1] - price[day-1] > maxim)      
             maxim = dp[t-1][day-1] - price[day-1];                      
             
            if( maxim + price[day] > dp[t][day-1])
              dp[t][day] = maxim + price[day];
            else
              dp[t][day] = dp[t][day-1];
        }
    }
    return dp[k][n-1];
}

int main() {
    
    int n;
    cin>>n;
    
    int price[n];
    for(int i=0; i<n; i++)
      cin>>price[i];
      
    int k;
    cin>>k;
    
    cout<<max_profit(n, price, k);
    return 0;
}