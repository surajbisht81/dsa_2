1. You are given a number n, representing the number of stairs in a staircase.
2. You are on the 0th step and are required to climb to the top.
3. You are given n numbers, where ith element's value represents - till how far from the step you 
     could jump to in a single move.  
     You can of course jump fewer number of steps in the move.
4. You are required to print the number of different paths via which you can climb to the top.


#include<bits/stdc++.h>
using namespace std;

int total_path(int arr[], int n)
{
    int dp[n+1]={0};                    // making the dp table with n+1 size and always initialize it with 0 for no garbage value;
    dp[n]=1;                            // there is only 1 path from last stair to reach last stair
    
    for(int i=n-1; i>=0; i--)           // we are making a backward loop;
    {
        for(int j=1; j<=arr[i] && i+j<(n+1); j++)      //  j will contain the no of moves we can make from a stair its range will be (1 - arr[i]) and j+i should not cross the boundary of dp table
        {
            dp[i] += dp[i+j];                       // eg. arr[i]=3, so dp will contain dp[i+1]+dp[i+2]+dp[i+3] at a time 1,2,3 are no of moves from a stair
        }
    }
    return dp[0];                   // finally return dp[0] which contains total no of paths from 0th stair to nth stair;
}

int main()
{
    int n;
    cin>>n;
    
    int arr[n];                 // this array gives the no of jumps at a time we can move from given stair 
    for(int i=0; i<n; i++)
     cin>>arr[i];
     
    int res = total_path(arr, n);
    cout<<res;
    return 0;
}