//-------------- Root to leaf path in a binary tree leetcode solution-------------------------

class Solution {
public:
    
    void binaryTreePaths_(TreeNode* root, string path, vector<string> &ans) {
        
        if(!root){
            return;
        }
        
        if(!root->left && !root->right){
            path += to_string(root->val);
            ans.push_back(path);
            return;
        }
        
        string newPath = path + to_string(root->val) + "->";
        
        binaryTreePaths_(root->left, newPath, ans);
        binaryTreePaths_(root->right, newPath, ans);
    }
    
    vector<string> binaryTreePaths(TreeNode* root) {   
        
        vector<string> ans;
        
        binaryTreePaths_(root, "", ans);
        
        return ans;
    }
};

//------------------------------------------------------------------------------------------


/*1. You are given a partially written BinaryTree class.
2. You are given a value lo and a value hi
3. You are required to complete the body of pathToLeafFromRoot function. The function is expected to print all paths from root to leaves which have sum 
of nodes in range from lo to hi (both inclusive). The elements in path should be separated by spaces. Each path should be in a separate line.*/


#include<bits/stdc++.h>
using namespace std;

class Node
{
    public:
    int data;
    Node *left, *right;
    
    Node(int data){
        this->data = data;
        left = NULL;
        right = NULL;
    }
};

class Pair
{
    public:
    Node *node;
    int state;
    Pair(Node *root, int x){
        node = root;
        state = x;
    }
};

Node *construct(int arr[])
{
    stack<Pair*> st;
    Node *root = new Node(arr[0]);
    
    Pair *p = new Pair(root, 1);
    st.push(p);
    
    int idx = 0;
    
    while(st.empty()==false)
    {
        Pair *top = st.top();
        
        if(top->state == 1){
            
            idx++;
            
            if(arr[idx] == INT_MIN){
                top->node->left = NULL;
            }
            else{
                Node *temp = new Node(arr[idx]);
                top->node->left = temp;
                Pair *p = new Pair(top->node->left, 1);
                st.push(p);
            }
            
            top->state++;
        }
        else if(top->state == 2){
            
            idx++;
            
            if(arr[idx] == INT_MIN){
                top->node->right = NULL;
            }
            else{
                Node *temp = new Node(arr[idx]);
                top->node->right = temp;
                Pair *p = new Pair(top->node->right, 1);
                st.push(p);
            }
            
            top->state++;
        }
        else{
            
            st.pop();
        }
    }
    return root;
}

vector<int> v;

void PrintRootToLeafPath(Node *root, int lo, int hi, int sum, string path)
{
    if(root==NULL)  // if root is null return;
     return;
     
    if(root->left==NULL and root->right==NULL)  // if it is leaf node 
    {
        sum = sum+root->data;  // then add this node to sum and check condition
        if(sum>=lo and sum<=hi)
          cout<<path<<to_string(root->data)<<endl;
          
        return;  // return for other paths
    }

    PrintRootToLeafPath(root->left, lo, hi, sum+root->data, path + to_string(root->data) + " ");   // going to left
    PrintRootToLeafPath(root->right, lo, hi, sum+root->data, path + to_string(root->data) + " " );  // going to right
}

int main()
{
    int n;
    cin>>n;
    
    int arr[n];
    string str;
    
    for(int i=0; i<n; i++)
    {
       cin>>str;
       
      if(str != "n")
         arr[i] = stoi(str);
      else
         arr[i] = INT_MIN;
    }
    
    Node *root = construct(arr);
    
    int lo, hi;
    cin>>lo>>hi;
    
    PrintRootToLeafPath(root, lo, hi, 0, "");
    
    return 0;
}
