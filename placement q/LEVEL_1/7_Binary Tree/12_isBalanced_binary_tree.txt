/*1. You are given a partially written BinaryTree class.
2. You are required to check if the tree is balanced. A binary tree is balanced if for every node the gap between height's of it's left and right subtree is not more than 1.
3. Input is managed for you. 
*/

#include<bits/stdc++.h>
using namespace std;

class Node
{
    public:
    int data;
    Node *left, *right;
    
    Node(int data){
        this->data = data;
        left = NULL;
        right = NULL;
    }
};

class Pair
{
    public:
    Node *node;
    int state;
    Pair(Node *root, int x){
        node = root;
        state = x;
    }
};

Node *construct(int arr[])
{
    stack<Pair*> st;
    Node *root = new Node(arr[0]);
    
    Pair *p = new Pair(root, 1);
    st.push(p);
    
    int idx = 0;
    
    while(st.empty()==false)
    {
        Pair *top = st.top();
        
        if(top->state == 1){
            
            idx++;
            
            if(arr[idx] == INT_MIN){
                top->node->left = NULL;
            }
            else{
                Node *temp = new Node(arr[idx]);
                top->node->left = temp;
                Pair *p = new Pair(top->node->left, 1);
                st.push(p);
            }
            
            top->state++;
        }
        else if(top->state == 2){
            
            idx++;
            
            if(arr[idx] == INT_MIN){
                top->node->right = NULL;
            }
            else{
                Node *temp = new Node(arr[idx]);
                top->node->right = temp;
                Pair *p = new Pair(top->node->right, 1);
                st.push(p);
            }
            
            top->state++;
        }
        else{
            
            st.pop();
        }
    }
    return root;
}

// bool subtree_balanced = true;

// int isBalanced(Node *root)
// {
//     if(root==NULL)
//      return 0;
     
//     int left_hgt = isBalanced(root->left);
//     int right_hgt = isBalanced(root->right);
    
//     int diff_hgt = abs(left_hgt - right_hgt);
    
//     if(diff_hgt>1){
//         subtree_balanced = false;
//     }
    
//     return max(left_hgt, right_hgt)+1;
// }

class bPair
{
   public:
   bool subtree_balanced;
   int hgt;
   
   bPair(){
       subtree_balanced = true;
       hgt = 0;
   }
};

bPair *isBalanced(Node *root)
{
   if(root == NULL){
       bPair *base = new bPair;
       return base;
   }
   
   bPair *left = isBalanced(root->left);
   bPair *right = isBalanced(root->right);
   
   bPair *myPair = new bPair;
   myPair->subtree_balanced = left->subtree_balanced && right->subtree_balanced;
   myPair->hgt = max(left->hgt, right->hgt)+1;
   
   if(abs(left->hgt-right->hgt) > 1){
       myPair->subtree_balanced = false;
   }
   
   return myPair;
}

int main()
{
    int n;
    cin>>n;
    
    int arr[n];
    string str;
    
    for(int i=0; i<n; i++)
    {
       cin>>str;
       
      if(str != "n")
         arr[i] = stoi(str);
      else
         arr[i] = INT_MIN;
    }
    
    Node *root = construct(arr);
    
    // isBalanced(root);
    // if(subtree_balanced)
    //  cout<<"true";
    // else 
    // cout<<"false";
    
    if(isBalanced(root)->subtree_balanced)
     cout<<"true";
    else 
     cout<<"false";
    
    return 0;
}