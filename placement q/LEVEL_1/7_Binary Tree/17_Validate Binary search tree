//-----------------------gfg solution --------------------------

class Solution {
public:
    
    bool isValid(TreeNode *root, int min, int max){
        
        if(!root) return true;
        
        if(min > root->val || root->val > max){
            return false;
        }
        
        return isValid(root->left, min, root->val-1) && isValid(root->right, root->val+1, max);
    }
    
    bool isValidBST(TreeNode* root) {
        return isValid(root, INT_MIN, INT_MAX);
    }
};


//---------------------- other solution best -------------------------------

class Solution {
public:
    TreeNode *prev = NULL;
    
    bool isValidBST(TreeNode* root) {
        
        if(root == NULL){
            return true;
        }
        
        if(!isValidBST(root->left)){
            return false;
        }
        
        if(prev!=NULL && prev->val >= root->val){
            return false;
        }
        
        prev = root;
        
        if(!isValidBST(root->right)){
            return false;
        }
        
        return true;
    }
};



// ----------------------- third solution  --------------------- 
//  using moris inorder traversal

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    TreeNode *getRightMostNode(TreeNode *left, TreeNode *curr){
        while(left->right != NULL && left->right != curr){
            left = left->right;
        }
        
        return left;
    }
    
    bool isValidBST(TreeNode* root) {
        
        TreeNode *curr = root;
        TreeNode *prev = NULL;
        
        while(curr != NULL){
            TreeNode *leftNode = curr->left;
            
            if(leftNode == NULL){
                if(prev!=NULL && prev->val > curr->val) return false;
                prev = curr;
                curr = curr->right;
            }
            else{
                TreeNode *rightMostNode = getRightMostNode(leftNode, curr);
                
                if(rightMostNode->right == NULL){
                    rightMostNode->right = curr;
                    curr = curr->left;
                }
                else{
                    if(prev->val > curr->val) return false;
                    
                    rightMostNode->right = NULL;
                    prev = curr;
                    curr = curr->right;
                }
            }
        }
        
        return true;
    }
};
