// ----------------- Is Lined List a Palindrome question --------------------------

// 1st approach using recusrsion

class Solution {
public:
    
    ListNode *pleft;
    
    bool isPalindromeHelper(ListNode *head)
    {
        if(head == NULL){
            return true;
        }
        
        bool rres = isPalindromeHelper(head->next);
        
        if(rres == false){
            return false;
        }
        else if(pleft->val != head->val){
            return false;
        }
        else{
            pleft = pleft->next;
            return true;
        }
    }
    
    bool isPalindrome(ListNode* head) {
        pleft = head;
        
        return isPalindromeHelper(head->next);
    }
};


// 2nd approach  ------ using iteration method

class Solution {
public:
    
    ListNode *reverseList(ListNode *head){
        ListNode *curr = head;
        ListNode *prev = NULL, *next = NULL;
        
        while( curr!= NULL ){
            next = curr->next;
            curr->next = prev;
            
            prev = curr;
            curr = next;
            
        }
        
        return prev;
    }
    
    bool isPalindrome(ListNode* head) {
        
        ListNode *slow = head;
        ListNode *fast = head;
        
        // first finding the node previous to middle node.
        while(fast->next!=NULL && fast->next->next!=NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        
        // reversing the list ahead of middle node 
        slow->next = reverseList(slow->next);
        
        ListNode *ptr1 = head;
        ListNode *ptr2 = slow->next;
        
        // checking for palindrome
        while(ptr2 != NULL){
            if(ptr1->val == ptr2->val){
                ptr1 = ptr1->next;
                ptr2 = ptr2->next;
            }
            else{
                return false;
            }
        }
        
        return true;
    }
};
