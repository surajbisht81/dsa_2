#include<bits/stdc++.h>
using namespace std;

class Node
{
    public:
    
     int data;
     Node *next;
     
     Node(int key){
         data = key;
         next = NULL;
     }
};

class LinkedList{
    
    public:
    Node *head;
    Node *tail;
    LinkedList(){
        head = NULL;
        tail = NULL;
    }

void addLast(int data){
    
    Node *temp = new Node(data);
    if((head) == NULL){
        head = tail = temp;
    }
    else{
        
        tail->next = temp;
        tail = temp;
    }
}

Node *mid_element(Node *head, Node *tail){
    
    Node *slow = head;
    Node *fast = head;
    
    while(fast!=tail and fast->next!=tail){
        slow = slow->next;
        fast = fast->next->next;
    }
    
    return slow;
}

LinkedList mergesort(LinkedList a, LinkedList b){
    
    LinkedList res;
    
    while(a.head!=NULL and b.head!=NULL){
        
        if(a.head->data <= b.head->data){
            res.addLast(a.head->data);
            a.head = a.head->next;
        }
        else{
            res.addLast(b.head->data);
            b.head = b.head->next;
        }
    }
    
    while(a.head!=NULL){
        res.addLast(a.head->data);
        a.head = a.head->next;
    }
    
    while(b.head!=NULL){
        res.addLast(b.head->data);
        b.head = b.head->next;
    }
    return res;
}

LinkedList mergeLists(Node *head, Node *tail){
    
      if(head == tail){
         LinkedList v;
         v.addLast(head->data);
         return v;
      }
      
      Node *mid = mid_element(head, tail);
      
      LinkedList l1 = mergeLists(head, mid);
      LinkedList l2 = mergeLists(mid->next, tail);
      
      LinkedList res = mergesort(l1, l2);
      return res;
}

void display(){
    
     Node *curr = head;
     while(curr!=NULL){
         cout<<curr->data<<" ";
         curr = curr->next;
     }
     cout<<endl;
}

};
int main(){
    
    int n;
    cin>>n;
    
    LinkedList l;
    for(int i=0; i<n; i++)
     {
         int x;
         cin>>x;
         l.addLast(x);
     }
    

    LinkedList res = res.mergeLists(l.head, l.tail);
    res.display();
    
    l.display();
    
    return 0;
}





---------------------  leetcode solution ---------------------------------


class Solution {
public:
    
    void SplitListIntoTwoLists(ListNode *head, ListNode **list1, ListNode **list2){
        
        ListNode *slow = head;
        ListNode *fast = head->next;
        
        while(fast!=NULL and fast->next!=NULL){
            fast = fast->next->next;
            slow = slow->next;
        }
        
        *list1 = head;
        *list2 = slow->next;
        slow->next = NULL;
    }
    
    ListNode *MergeSort(ListNode *list1, ListNode *list2)
    {
        
        // cout<<"Bisht"<<endl;
        if(!list1) return list2;
        if(!list2) return list1;
        
        ListNode *dummy = new ListNode(0);
        ListNode *result = dummy;
        
        while(list1!=NULL and list2!=NULL){
            if(list1->val <= list2->val){
                dummy->next = list1;
                dummy = dummy->next;
                list1 = list1->next;
            }
            else{
                dummy->next = list2;
                dummy = dummy->next;
                list2 = list2->next;
            }
        }
        
        while(list1 != NULL){
            dummy->next = list1;
            dummy = dummy->next;
            list1 = list1->next;
        }
        
        while(list2!=NULL){
            dummy->next = list2;
            dummy = dummy->next;
            list2 = list2->next;
        }
        
        return result->next;
    }
    
    ListNode* sortList(ListNode* head) {
        
        // Base cases;
        if(head==NULL or head->next==NULL){
            return head;
        }
        
        ListNode *list1, *list2;

        SplitListIntoTwoLists(head, &list1, &list2);
        
        ListNode *l1 = sortList(list1);
        ListNode *l2 = sortList(list2);
        
        return MergeSort(l1, l2);
    }
};
