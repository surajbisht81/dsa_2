#include<bits/stdc++.h>
using namespace std;

bool isQueenSafe(vector<vector<int>> & v, int n, int row, int col)
{
    for(int i=row-1; i>=0; i--){                                                       // checking for vertically up
        if(v[i][col]==1)
         return false;
    }
    
    for(int i=row-1, j=col-1; i>=0 && j>=0; i--, j--){                              // checing for diagonally left
        if(v[i][j]==1)
         return false;
    }
    
   for(int i=row-1, j=col+1; i>=0 && j<n; i--, j++){                                // checking for diagonally right
        if(v[i][j]==1)
          return false;
    }
    return true;
}

void NQueen(vector<vector<int>> &chess, int n, int row, string output)
{
    if(row==n)                                                                     // if we cross the board then print output and return;
    {
        cout<<output+"."<<endl;
        return;
    }
    for(int i=0; i<n; i++)                                                         // exploring every column
    {
       if(isQueenSafe(chess, n, row, i))
       {
           chess[row][i] = 1;                                                      // placing the queen as 1
           NQueen(chess, n, row+1, output+to_string(row)+"-"+to_string(i)+", ");   // row will be +1, output will contain pair of row and column as (row-col)
           chess[row][i] = 0;                                                       // backtracking and removing the queen from its place
       }
    }
}

int main() {
    
    int n;
    cin>>n;
    
    vector<vector<int>> chess(n);                                                      // giving size in 2D vector is necessary
    
   for(int i=0; i<n; i++)
    {
        for(int j=0; j<n; j++)
        {
            chess[i].push_back(0);                                                     // initializing the vector is also necessary
        }
    }
       
    NQueen(chess, n, 0, "");                                                            // initial row is 0 and output is blank("")
    return 0;
}