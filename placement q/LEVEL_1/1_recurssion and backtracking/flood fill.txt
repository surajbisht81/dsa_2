#include<bits/stdc++.h>
using namespace std;

void print_paths(vector<vector<int>> &maze, int sr, int sc, int n, int m, string output)
{
    if(sr<0 or sc<0 or sr>n or sc>m or maze[sr][sc]==1)                            // if we cross out of maze and there is obstackle inside the maze i.e., 1
      return;
      
    if(sr==n and sc==m)                                                              // if we are at bottom last cell then print the ans and return
    {
        cout<<output<<endl;
        return;
    }
    
    maze[sr][sc]=1;                                   // making the cell visited without the use of visited vector or array
    print_paths(maze, sr-1, sc, n, m, output+"t");            // exploring the top
    print_paths(maze, sr, sc-1, n, m, output+"l");            // exploring the left
    print_paths(maze, sr+1, sc, n, m, output+"d");            // exploring the down
    print_paths(maze, sr, sc+1, n, m, output+"r");            // exploring the right
    maze[sr][sc]=0;                                    // backtracking and making the cell unvisited for other paths
}

int main() {
    
    int n, m;
    
    cin>>n>>m;
    
    vector<vector<int>> maze(n);                         // giving size is necessary for 2D vector
    for(int i=0; i<n; i++)
    {
        for(int j=0; j<m; j++)
        {
            int x;
            cin>>x;
            maze[i].push_back(x);              //initializing the vector is also necessary ;
        }
    }
    
    print_paths(maze, 0, 0, n-1, m-1, "");
     return 0;
}
